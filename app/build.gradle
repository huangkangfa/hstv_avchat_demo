apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion App.COMPILESDKVERSION
    buildToolsVersion App.BUILDTOOLSVERSION

    defaultConfig {
        applicationId App.APPLICATION_ID
        minSdkVersion App.MINSDKVERSION
        targetSdkVersion App.TARGETSDKVERSION
        versionCode App.APP_VERSION_CODE
        versionName App.APP_VERSION_NAME

        testInstrumentationRunner App.ANDROID_JUNIT_RUNNER

        multiDexEnabled true

        ndk {
            abiFilters "armeabi-v7a"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        //必须，告知RxHttp你依赖的okhttp版本，目前已适配 v3.12.0 - v4.8.1版本  (v4.3.0除外)
                        rxhttp_okhttp: Versions.OKHTTP,
                        //使用asXxx方法时必须，告知RxHttp你依赖的rxjava版本，可传入rxjava2、rxjava3
                        rxhttp_rxjava: 'rxjava3',
                        rxhttp_package: 'rxhttp'   //非必须，指定RxHttp相关类的生成路径，即包名
                ]
            }
        }

    }

    /**
     *  签名设置
     */
    signingConfigs {
        debug {
            storeFile file(DebugConfig.SIGN_STORE_FILE)
            storePassword DebugConfig.SIGN_STORE_PASSWORD
            keyAlias DebugConfig.SIGN_KEY_ALIAS
            keyPassword DebugConfig.SIGN_KEY_PASSWORD
        }

        release {
            storeFile file(ReleaseConfig.SIGN_STORE_FILE)
            storePassword ReleaseConfig.SIGN_STORE_PASSWORD
            keyAlias ReleaseConfig.SIGN_KEY_ALIAS
            keyPassword ReleaseConfig.SIGN_KEY_PASSWORD
        }
    }

    /**
     * 设置默认打包名
     */
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //获取当前模式debug或release
            def buildType = variant.buildType.name
            //获取当前系统时间
            def releaseTime = new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
            //这里修改apk文件名,格式为 module_buildType_version_time.apk
            outputFileName = "aos_${buildType}_v${defaultConfig.versionName}_${releaseTime}.apk"
        }
    }

    buildTypes {
        debug {
            buildConfigField "String", "BASE_URL", "\"" + DebugConfig.BASE_URL + "\""
            buildConfigField "String", "PRODUCT_CHANNEL", "\"" + DebugConfig.PRODUCT_CHANNEL + "\""
            buildConfigField "String", "TENCENT_LIVE_SECRETKEY", "\"" + DebugConfig.TENCENT_LIVE_SECRETKEY + "\""
            buildConfigField "int", "TENCENT_APP_ID", "" + DebugConfig.TENCENT_APP_ID + ""
            signingConfig signingConfigs.debug
        }
        release {
            buildConfigField "String", "BASE_URL", "\"" + ReleaseConfig.BASE_URL + "\""
            buildConfigField "String", "PRODUCT_CHANNEL", "\"" + ReleaseConfig.PRODUCT_CHANNEL + "\""
            buildConfigField "String", "TENCENT_LIVE_SECRETKEY", "\"" + ReleaseConfig.TENCENT_LIVE_SECRETKEY + "\""
            buildConfigField "int", "TENCENT_APP_ID", "" + ReleaseConfig.TENCENT_APP_ID + ""
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures{
        dataBinding true
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(path: ':avchat')
    testImplementation AndroidTestingLib.JUNIT
    androidTestImplementation AndroidTestingLib.ANDROIDX_TEST_EXT_JUNIT
    androidTestImplementation AndroidTestingLib.ESPRESSO_CORE
    kapt Kapts.RXHTTP_COMPILER
}